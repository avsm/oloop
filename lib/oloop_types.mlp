(* Types shared between the Oloop module and the oloop-top executable
   to ensure typed communication. *)

open Types (* compiler types *)

(*
 * Toploop input
 *)

type top_input =
  | Phrase of string
  | Init of string

let read ch = (input_value ch : top_input)
(* [send] declared in [Oloop] because it depends on [Core]. *)

(*
 * out_phrase
 *)

type pp_directive =
  | String of string
  | Newline
  | Spaces of int

let recorder l =
  let out_string s ofs len = l := String(String.sub s ofs len) :: !l in
  let out_flush () = () in
  let out_newline () = l := Newline :: !l in
  let out_spaces n = l := Spaces n :: !l in
  let fmt = Format.make_formatter out_string out_flush in
  Format.pp_set_formatter_out_functions
    fmt { Format.out_string;  out_flush;  out_newline;  out_spaces };
  fmt

let record (pp: Format.formatter -> unit) =
  let l = ref [] in
  let fmt = recorder l in
  pp fmt;
  Format.pp_print_flush fmt ();
  List.rev !l

let play_directive fmt = function
  | String s -> Format.pp_print_string fmt s
  | Newline -> Format.pp_force_newline fmt ()
  | Spaces n -> for _i = 1 to n do Format.pp_print_space fmt () done

let replay l fmt =
  Format.pp_open_hvbox fmt 0;
  List.iter (play_directive fmt) l;
  Format.pp_close_box fmt ()

(* Outcometree.out_phrase contains a closure (which cannot be
   marshalled) to handle arbitrary pretty printers.  Play it on a
   recording formatter to keep most of it. *)

type serializable_out_value =
  | Array of serializable_out_value list
  | Char of char
  | Constr of Outcometree.out_ident * serializable_out_value list
  | Ellipsis
  | Float of float
  | Int of int
  | Int32 of int32
  | Int64 of int64
  | Nativeint of nativeint
  | List of serializable_out_value list
  | Printer of pp_directive list
  | Record of (Outcometree.out_ident * serializable_out_value) list
  | String of string
  | Stuff of string
  | Tuple of serializable_out_value list
  | Variant of string * serializable_out_value option

(* The [Exception_string] is used if [exn] is not serializable. *)
type serializable_out_phrase =
  | Eval of serializable_out_value * Outcometree.out_type
  | Signature of (Outcometree.out_sig_item * serializable_out_value option) list
  | Exception of (exn * serializable_out_value)
  | Exception_string of (string * serializable_out_value)
  | Exception_Stack_overflow of serializable_out_value

let empty = Signature []

let rec of_outcometree_value =
  let open Outcometree in
  function
  | Oval_array l -> Array(List.map of_outcometree_value l)
  | Oval_char c -> Char c
  | Oval_constr(oi, ov) -> Constr(oi, List.map of_outcometree_value ov)
  | Oval_ellipsis -> Ellipsis
  | Oval_float f -> Float f
  | Oval_int i -> Int i
  | Oval_int32 i -> Int32 i
  | Oval_int64 i -> Int64 i
  | Oval_nativeint i -> Nativeint i
  | Oval_list l -> List(List.map of_outcometree_value l)
  | Oval_printer p -> Printer(record p)
  | Oval_record l -> Record(List.map of_outcometree_record l)
  | Oval_string s -> String s
  | Oval_stuff s -> Stuff s
  | Oval_tuple ov -> Tuple(List.map of_outcometree_value ov)
  | Oval_variant(s, None) -> Variant(s, None)
  | Oval_variant(s, Some ov) -> Variant(s, Some(of_outcometree_value ov))
and of_outcometree_record (oi, ov) =
  (oi, of_outcometree_value ov)

let of_outcometree_sig (si, maybe_ov) =
  match maybe_ov with
  | None -> (si, None)
  | Some ov -> (si, Some(of_outcometree_value ov))

let of_outcometree_phrase =
  let open Outcometree in
  function
  | Ophr_eval(ov, ot) -> Eval(of_outcometree_value ov, ot)
  | Ophr_signature l -> Signature(List.map of_outcometree_sig l)
  | Ophr_exception(e, ov) -> Exception(e, of_outcometree_value ov)


let rec to_outcometree_value =
  let open Outcometree in
  function
  | Array l -> Oval_array(List.map to_outcometree_value l)
  | Char c -> Oval_char c
  | Constr(oi, ov) -> Oval_constr(oi, List.map to_outcometree_value ov)
  | Ellipsis -> Oval_ellipsis
  | Float f -> Oval_float f
  | Int i -> Oval_int i
  | Int32 i -> Oval_int32 i
  | Int64 i -> Oval_int64 i
  | Nativeint i -> Oval_nativeint i
  | List l -> Oval_list(List.map to_outcometree_value l)
  | Printer p -> Oval_printer(replay p)
  | Record l -> Oval_record(List.map to_outcometree_record l)
  | String s -> Oval_string s
  | Stuff s -> Oval_stuff s
  | Tuple ov -> Oval_tuple(List.map to_outcometree_value ov)
  | Variant(s, None) -> Oval_variant(s, None)
  | Variant(s, Some ov) -> Oval_variant(s, Some(to_outcometree_value ov))
and to_outcometree_record (oi, ov) =
  (oi, to_outcometree_value ov)

let to_outcometree_sig (si, maybe_ov) =
  match maybe_ov with
  | None -> (si, None)
  | Some ov -> (si, Some(to_outcometree_value ov))

(*
 * Errors
 *)

(* Several errors contain Env.t which is not serializable because it
   contains a closure.  Convert the Env.t to their summary. *)

type serializable_typedecl_error =
  | S_Repeated_parameter
  | S_Duplicate_constructor of string
  | S_Too_many_constructors
  | S_Duplicate_label of string
  | S_Recursive_abbrev of string
#if OCAML_VERSION >= (4, 02, 0)
  | S_Cycle_in_def of string * type_expr
#endif
  | S_Definition_mismatch of type_expr * Includecore.type_mismatch list
  | S_Constraint_failed of type_expr * type_expr
  | S_Inconsistent_constraint of Env.summary * (type_expr * type_expr) list
  | S_Type_clash of Env.summary * (type_expr * type_expr) list
  | S_Parameters_differ of Path.t * type_expr * type_expr
  | S_Null_arity_external
  | S_Missing_native_external
  | S_Unbound_type_var of type_expr * type_declaration
#if OCAML_VERSION < (4, 02, 0)
  | S_Unbound_exception of Longident.t
  | S_Not_an_exception of Longident.t
#else
  | S_Not_open_type of Path.t
  | S_Not_extensible_type of Path.t
  | S_Extension_mismatch of Path.t * Includecore.type_mismatch list
  | S_Rebind_wrong_type of
      Longident.t * Env.summary * (type_expr * type_expr) list
  | S_Rebind_mismatch of Longident.t * Path.t * Path.t
  | S_Rebind_private of Longident.t
#endif
  | S_Bad_variance of int * (bool*bool*bool) * (bool*bool*bool)
  | S_Unavailable_type_constructor of Path.t
  | S_Bad_fixed_type of string
#if OCAML_VERSION < (4, 02, 0)
  | S_Unbound_type_var_exc of type_expr * type_expr
#else
  | S_Unbound_type_var_ext of type_expr * extension_constructor
#endif
  | S_Varying_anonymous


let serialize_typedecl_error =
  let open Typedecl in
  function
  | Repeated_parameter -> S_Repeated_parameter
  | Duplicate_constructor s -> S_Duplicate_constructor s
  | Too_many_constructors -> S_Too_many_constructors
  | Duplicate_label s -> S_Duplicate_label s
  | Recursive_abbrev s -> S_Recursive_abbrev s
#if OCAML_VERSION >= (4, 02, 0)
  | Cycle_in_def(s, e) -> S_Cycle_in_def(s, e)
#endif
  | Definition_mismatch(e, l) -> S_Definition_mismatch(e, l)
  | Constraint_failed(e1, e2) -> S_Constraint_failed(e1, e2)
  | Inconsistent_constraint(env, l) ->
     S_Inconsistent_constraint(Env.summary env, l)
  | Type_clash(env, l) -> S_Type_clash(Env.summary env, l)
  | Parameters_differ(p, e1, e2) -> S_Parameters_differ(p, e1, e2)
  | Null_arity_external -> S_Null_arity_external
  | Missing_native_external -> S_Missing_native_external
  | Unbound_type_var(e, d) -> S_Unbound_type_var(e, d)
#if OCAML_VERSION < (4, 02, 0)
  | Unbound_exception id -> S_Unbound_exception id
  | Not_an_exception id -> S_Not_an_exception id
#else
  | Not_open_type p -> S_Not_open_type p
  | Not_extensible_type p -> S_Not_extensible_type p
  | Extension_mismatch(p, l) -> S_Extension_mismatch(p, l)
  | Rebind_wrong_type(id, env, l) ->
     S_Rebind_wrong_type(id, Env.summary env, l)
  | Rebind_mismatch(id, p1, p2) -> S_Rebind_mismatch(id, p1, p2)
  | Rebind_private id -> S_Rebind_private id
#endif
  | Bad_variance(i, b1, b2) -> S_Bad_variance(i, b1, b2)
  | Unavailable_type_constructor p -> S_Unavailable_type_constructor p
  | Bad_fixed_type s -> S_Bad_fixed_type s
#if OCAML_VERSION < (4, 02, 0)
  | Unbound_type_var_exc(e1, e2) -> S_Unbound_type_var_exc(e1, e2)
#else
  | Unbound_type_var_ext (e, c) -> S_Unbound_type_var_ext(e, c)
#endif
  | Varying_anonymous -> S_Varying_anonymous
#if OCAML_VERSION >= (4, 04, 0)
  | Val_in_structure
  | Multiple_native_repr_attributes
  | Bad_immediate_attribute
  | Wrong_unboxed_type_float 
  | Boxed_and_unboxed
  | Cannot_unbox_or_untag_type _
  | Deep_unbox_or_untag_attribute _
  | Bad_unboxed_attribute _ -> assert false
#endif

(* [env_of_summary] requires that the path and initial environment are
   initialized.  This is not necessary for the toploop thus is done in
   [Oloop_ocaml] for the main program only. *)
let deserialize_typedecl_error ~env_of_summary =
  let open Typedecl in
  function
  | S_Repeated_parameter -> Repeated_parameter
  | S_Duplicate_constructor s -> Duplicate_constructor s
  | S_Too_many_constructors -> Too_many_constructors
  | S_Duplicate_label s -> Duplicate_label s
  | S_Recursive_abbrev s -> Recursive_abbrev s
#if OCAML_VERSION >= (4, 02, 0)
  | S_Cycle_in_def(s, e) -> Cycle_in_def(s, e)
#endif
  | S_Definition_mismatch(e, l) -> Definition_mismatch(e, l)
  | S_Constraint_failed(e1, e2) -> Constraint_failed(e1, e2)
  | S_Inconsistent_constraint(env, l) ->
     Inconsistent_constraint(env_of_summary env, l)
  | S_Type_clash(env, l) -> Type_clash(env_of_summary env, l)
  | S_Parameters_differ(p, e1, e2) -> Parameters_differ(p, e1, e2)
  | S_Null_arity_external -> Null_arity_external
  | S_Missing_native_external -> Missing_native_external
  | S_Unbound_type_var(e, d) -> Unbound_type_var(e, d)
#if OCAML_VERSION < (4, 02, 0)
  | S_Unbound_exception id -> Unbound_exception id
  | S_Not_an_exception id -> Not_an_exception id
#else
  | S_Not_open_type p -> Not_open_type p
  | S_Not_extensible_type p -> Not_extensible_type p
  | S_Extension_mismatch(p, l) -> Extension_mismatch(p, l)
  | S_Rebind_wrong_type(id, env, l) ->
     Rebind_wrong_type(id, env_of_summary env, l)
  | S_Rebind_mismatch(id, p1, p2) -> Rebind_mismatch(id, p1, p2)
  | S_Rebind_private id -> Rebind_private id
#endif
  | S_Bad_variance(i, b1, b2) -> Bad_variance(i, b1, b2)
  | S_Unavailable_type_constructor p -> Unavailable_type_constructor p
  | S_Bad_fixed_type s -> Bad_fixed_type s
#if OCAML_VERSION < (4, 02, 0)
  | S_Unbound_type_var_exc(e1, e2) -> Unbound_type_var_exc(e1, e2)
#else
  | S_Unbound_type_var_ext (e, c) -> Unbound_type_var_ext(e, c)
#endif
  | S_Varying_anonymous -> Varying_anonymous


type serializable_ctype_class_match_failure =
  | S_CM_Virtual_class
  | S_CM_Parameter_arity_mismatch of int * int
  | S_CM_Type_parameter_mismatch of Env.summary * (type_expr * type_expr) list
  | S_CM_Class_type_mismatch of Env.summary * class_type * class_type
  | S_CM_Parameter_mismatch of Env.summary * (type_expr * type_expr) list
  | S_CM_Val_type_mismatch of string * Env.summary
                              * (type_expr * type_expr) list
  | S_CM_Meth_type_mismatch of string * Env.summary
                               * (type_expr * type_expr) list
  | S_CM_Non_mutable_value of string
  | S_CM_Non_concrete_value of string
  | S_CM_Missing_value of string
  | S_CM_Missing_method of string
  | S_CM_Hide_public of string
  | S_CM_Hide_virtual of string * string
  | S_CM_Public_method of string
  | S_CM_Private_method of string
  | S_CM_Virtual_method of string

let serialize_ctype_class_match_failure =
  let open Ctype in
  function
  | CM_Virtual_class -> S_CM_Virtual_class
  | CM_Parameter_arity_mismatch(i, j) -> S_CM_Parameter_arity_mismatch(i, j)
  | CM_Type_parameter_mismatch(env,l) ->
     S_CM_Type_parameter_mismatch(Env.summary env, l)
  | CM_Class_type_mismatch(env, c1, c2) ->
     S_CM_Class_type_mismatch(Env.summary env, c1, c2)
  | CM_Parameter_mismatch(env, l) ->
     S_CM_Parameter_mismatch(Env.summary env, l)
  | CM_Val_type_mismatch(s, env, l) ->
     S_CM_Val_type_mismatch(s, Env.summary env, l)
  | CM_Meth_type_mismatch(s, env, l) ->
     S_CM_Meth_type_mismatch(s, Env.summary env, l)
  | CM_Non_mutable_value s -> S_CM_Non_mutable_value s
  | CM_Non_concrete_value s -> S_CM_Non_concrete_value s
  | CM_Missing_value s -> S_CM_Missing_value s
  | CM_Missing_method s -> S_CM_Missing_method s
  | CM_Hide_public s -> S_CM_Hide_public s
  | CM_Hide_virtual(s1, s2) -> S_CM_Hide_virtual(s1, s2)
  | CM_Public_method s -> S_CM_Public_method s
  | CM_Private_method s -> S_CM_Private_method s
  | CM_Virtual_method s -> S_CM_Virtual_method s

let deserialize_ctype_class_match_failure ~env_of_summary =
  let open Ctype in
  function
  | S_CM_Virtual_class -> CM_Virtual_class
  | S_CM_Parameter_arity_mismatch(i, j) -> CM_Parameter_arity_mismatch(i, j)
  | S_CM_Type_parameter_mismatch(env,l) ->
     CM_Type_parameter_mismatch(env_of_summary env, l)
  | S_CM_Class_type_mismatch(env, c1, c2) ->
     CM_Class_type_mismatch(env_of_summary env, c1, c2)
  | S_CM_Parameter_mismatch(env, l) ->
     CM_Parameter_mismatch(env_of_summary env, l)
  | S_CM_Val_type_mismatch(s, env, l) ->
     CM_Val_type_mismatch(s, env_of_summary env, l)
  | S_CM_Meth_type_mismatch(s, env, l) ->
     CM_Meth_type_mismatch(s, env_of_summary env, l)
  | S_CM_Non_mutable_value s -> CM_Non_mutable_value s
  | S_CM_Non_concrete_value s -> CM_Non_concrete_value s
  | S_CM_Missing_value s -> CM_Missing_value s
  | S_CM_Missing_method s -> CM_Missing_method s
  | S_CM_Hide_public s -> CM_Hide_public s
  | S_CM_Hide_virtual(s1, s2) -> CM_Hide_virtual(s1, s2)
  | S_CM_Public_method s -> CM_Public_method s
  | S_CM_Private_method s -> CM_Private_method s
  | S_CM_Virtual_method s -> CM_Virtual_method s


type serializable_typeclass_error =
  | S_Unconsistent_constraint of (type_expr * type_expr) list
  | S_Field_type_mismatch of string * string * (type_expr * type_expr) list
  | S_Structure_expected of class_type
  | S_Cannot_apply of class_type
#if OCAML_VERSION >= (4, 03, 0)
  | S_Apply_wrong_label of Asttypes.arg_label
#else
  | S_Apply_wrong_label of Asttypes.label
#endif
  | S_Pattern_type_clash of type_expr
  | S_Repeated_parameter
  | S_Unbound_class_2 of Longident.t
  | S_Unbound_class_type_2 of Longident.t
  | S_Abbrev_type_clash of type_expr * type_expr * type_expr
  | S_Constructor_type_mismatch of string * (type_expr * type_expr) list
#if OCAML_VERSION <= (4, 01, 0)
  | S_Virtual_class of bool * string list * string list
#else
  | S_Virtual_class of bool * bool * string list * string list
#endif
  | S_Parameter_arity_mismatch of Longident.t * int * int
  | S_Parameter_mismatch of (type_expr * type_expr) list
  | S_Bad_parameters of Ident.t * type_expr * type_expr
  | S_Class_match_failure of serializable_ctype_class_match_failure list
  | S_Unbound_val of string
  | S_Unbound_type_var of pp_directive list * Ctype.closed_class_failure
  | S_Make_nongen_seltype of type_expr
  | S_Non_generalizable_class of Ident.t * Types.class_declaration
  | S_Cannot_coerce_self of type_expr
  | S_Non_collapsable_conjunction of
      Ident.t * Types.class_declaration * (type_expr * type_expr) list
  | S_Final_self_clash of (type_expr * type_expr) list
  | S_Mutability_mismatch of string * Asttypes.mutable_flag
  | S_No_overriding of string * string
  | S_Duplicate of string * string

let serialize_typeclass_error =
  let open Typeclass in
  function
  | Unconsistent_constraint l -> S_Unconsistent_constraint l
  | Field_type_mismatch(s1, s2, l) -> S_Field_type_mismatch(s1, s2, l)
  | Structure_expected c -> S_Structure_expected c
  | Cannot_apply c -> S_Cannot_apply c
  | Apply_wrong_label l -> S_Apply_wrong_label l
  | Pattern_type_clash t -> S_Pattern_type_clash t
  | Repeated_parameter -> S_Repeated_parameter
  | Unbound_class_2 l -> S_Unbound_class_2 l
  | Unbound_class_type_2 l -> S_Unbound_class_type_2 l
  | Abbrev_type_clash(t1, t2, t3) -> S_Abbrev_type_clash(t1, t2, t3)
  | Constructor_type_mismatch(s, l) -> S_Constructor_type_mismatch(s, l)
#if OCAML_VERSION <= (4, 01, 0)
  | Virtual_class(b, l1, l2) -> S_Virtual_class(b, l1, l2)
#else
  | Virtual_class(b1, b2, l1, l2) -> S_Virtual_class(b1, b2, l1, l2)
#endif
  | Parameter_arity_mismatch(l, i, j) -> S_Parameter_arity_mismatch(l, i, j)
  | Parameter_mismatch l -> S_Parameter_mismatch l
  | Bad_parameters(id, e1, e2) -> S_Bad_parameters(id, e1, e2)
  | Class_match_failure l ->
     let l = List.map serialize_ctype_class_match_failure l in
     S_Class_match_failure l
  | Unbound_val s -> S_Unbound_val s
  | Unbound_type_var (pr, f) -> S_Unbound_type_var(record pr, f)
  | Make_nongen_seltype t -> S_Make_nongen_seltype t
  | Non_generalizable_class(id, c) -> S_Non_generalizable_class(id, c)
  | Cannot_coerce_self t -> S_Cannot_coerce_self t
  | Non_collapsable_conjunction(id, d, l) ->
     S_Non_collapsable_conjunction(id, d, l)
  | Final_self_clash l -> S_Final_self_clash l
  | Mutability_mismatch(s, f) -> S_Mutability_mismatch(s, f)
  | No_overriding(s1, s2) -> S_No_overriding(s1, s2)
  | Duplicate(s1, s2) -> S_Duplicate(s1, s2)

let deserialize_typeclass_error ~env_of_summary =
  let open Typeclass in
  function
  | S_Unconsistent_constraint l -> Unconsistent_constraint l
  | S_Field_type_mismatch(s1, s2, l) -> Field_type_mismatch(s1, s2, l)
  | S_Structure_expected c -> Structure_expected c
  | S_Cannot_apply c -> Cannot_apply c
  | S_Apply_wrong_label l -> Apply_wrong_label l
  | S_Pattern_type_clash t -> Pattern_type_clash t
  | S_Repeated_parameter -> Repeated_parameter
  | S_Unbound_class_2 l -> Unbound_class_2 l
  | S_Unbound_class_type_2 l -> Unbound_class_type_2 l
  | S_Abbrev_type_clash(t1, t2, t3) -> Abbrev_type_clash(t1, t2, t3)
  | S_Constructor_type_mismatch(s, l) -> Constructor_type_mismatch(s, l)
#if OCAML_VERSION <= (4, 01, 0)
  | S_Virtual_class(b, l1, l2) -> Virtual_class(b, l1, l2)
#else
  | S_Virtual_class(b1, b2, l1, l2) -> Virtual_class(b1, b2, l1, l2)
#endif
  | S_Parameter_arity_mismatch(l, i, j) -> Parameter_arity_mismatch(l, i, j)
  | S_Parameter_mismatch l -> Parameter_mismatch l
  | S_Bad_parameters(id, e1, e2) -> Bad_parameters(id, e1, e2)
  | S_Class_match_failure l ->
     let m = List.map (deserialize_ctype_class_match_failure ~env_of_summary)
                      l in
     Class_match_failure m
  | S_Unbound_val s -> Unbound_val s
  | S_Unbound_type_var (pr, f) -> Unbound_type_var(replay pr, f)
  | S_Make_nongen_seltype t -> Make_nongen_seltype t
  | S_Non_generalizable_class(id, c) -> Non_generalizable_class(id, c)
  | S_Cannot_coerce_self t -> Cannot_coerce_self t
  | S_Non_collapsable_conjunction(id, d, l) ->
     Non_collapsable_conjunction(id, d, l)
  | S_Final_self_clash l -> Final_self_clash l
  | S_Mutability_mismatch(s, f) -> Mutability_mismatch(s, f)
  | S_No_overriding(s1, s2) -> No_overriding(s1, s2)
  | S_Duplicate(s1, s2) -> Duplicate(s1, s2)

type serializable_error =
  [ `Lexer of Location.t * Lexer.error
  | `Syntaxerr of Syntaxerr.error
  | `Typedecl of Location.t * serializable_typedecl_error
  | `Typetexp of Location.t * Env.summary * Typetexp.error
  | `Typecore of Location.t * Env.summary * Typecore.error
  | `Typeclass of Location.t * Env.summary * serializable_typeclass_error
  | `Symtable of Symtable.error
  | `Internal_error of string ]


(** Outcome of evaluating toplevel phrases.
    - [OK] means that the phrase was correctly evaluated (if the
      phrase raises an exception, it is reported this way too).
    - [Error (e, s)] means that the phrases were not evaluated
      correctly because of a syntax error [e = `Syntaxerr _], a
      type error [e = `Typecore _], an unbound module [e =
      `Typetexp _], etc.
      The string is the explanation the toplevel would display
      (or an explanation of the error in case of [`Internal_error]). *)
type out_phrase_or_error =
  | Ok of serializable_out_phrase * bool * (Location.t * Warnings.t) list
  | Error of (serializable_error * string)

let output_out_phrase_or_error ch (o: out_phrase_or_error) =
  output_value ch o;
  flush ch

let send_out_phrase_or_error ch o =
  match o with
  | Ok(Exception(Stack_overflow, v), b, l) ->
     output_out_phrase_or_error ch (Ok(Exception_Stack_overflow v, b, l))
  | Ok(Exception(e, v), b, l) ->
     (try output_out_phrase_or_error ch o
      with Invalid_argument _ ->
        let e = Printexc.to_string e in
        output_out_phrase_or_error ch (Ok(Exception_string(e, v), b, l)))
  | _ -> output_out_phrase_or_error ch o

let end_output = '\x04'

(*
 * Init output
 *)

type init_output = { init_ok: bool;
                     init_out: string }

let send_init_outcome ch (o: init_output) =
  output_value ch o;
  flush ch
